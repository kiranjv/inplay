package com.app.player;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;


import com.app.player.common.InplayConstants;
import com.app.player.data.InplayDataProvider;
import com.app.player.error.InplayErrorDisplayPanel;
import com.app.player.exception.InplayTimeoutException;
import com.app.player.left.InplayGenreLabel;
import com.app.player.listener.InplayMainFrameWindowAdaptor;
import com.app.player.login.InplayLoginHandler;
import com.app.player.util.InplayImageAnimation;
import com.app.player.util.InplayBackgroundImagePanel;
import com.app.player.util.InplayPlayerUtil;
import com.app.player.util.InplayTextAnimation;

public class InplayPlayer {
	
	static boolean keepLoading = true;
	static JLabel loadingLabel = InplayComponentFactory.createLoadingLabel();
	static JLabel updateText = new InplayGenreLabel("Downloading Movie Details.",12);
	
	public static void main(String[] args) {
		InplayTextAnimation labelAnimation = new InplayTextAnimation(loadingLabel);
		
		showSplashScreen(labelAnimation);
		
		try {
			InplayDataProvider.syncDataWithServer();
		} catch (Exception e) {
			InplayPlayer.handleError(e);
			try {
				Thread.currentThread().sleep(5000);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			System.exit(0);
		}
	
		InplayLoginHandler.loginUserOnStart();
		postLoading(labelAnimation);
		
		new InplayDataWorker().start();
	}
	
	
	public static void handleError(Exception ex) {
		InplayLoadingFrame loadingFrame = InplayComponentFactory.getLoadingFrame();
		ex.printStackTrace();
		InplayErrorDisplayPanel inplayErrorDisplayPanel = new InplayErrorDisplayPanel(ex);
		inplayErrorDisplayPanel.setBorder(new LineBorder(Color.RED,2));
		loadingFrame.setSize(450,200);
		loadingFrame.setContentPane(inplayErrorDisplayPanel);
		loadingFrame.setVisible(true);
		
	}


	private static void postLoading(InplayTextAnimation labelAnimation) {
		labelAnimation.stopAnimation();
		InplayPlayerUtil.init();
		InplayLoadingFrame loadingFrame = InplayComponentFactory.getLoadingFrame();
		loadingFrame.setVisible(false);
		loadingFrame.dispose();
	}

	private static void showSplashScreen(InplayTextAnimation labelAnimation) {
		InplayLoadingFrame loadingFrame = InplayComponentFactory.getLoadingFrame();
		JPanel panel = new JPanel();
		panel.setLayout(new BorderLayout());
		panel.setBackground(Color.WHITE);
		loadingLabel.setHorizontalAlignment(JLabel.LEFT);
		panel.add(loadingLabel,BorderLayout.CENTER);
		updateText.setHorizontalAlignment(JLabel.CENTER);
		updateText.setBorder(new EmptyBorder(0,0,10,0));
		panel.add(updateText,BorderLayout.SOUTH);
		panel.setBorder(new LineBorder(Color.GRAY,1));
		loadingLabel.setBorder(new EmptyBorder(0,150,0,0));
		loadingFrame.setSize(450,200);
		loadingFrame.setContentPane(panel);
		loadingFrame.setVisible(true);
		labelAnimation.startAnimation();
	}

}
