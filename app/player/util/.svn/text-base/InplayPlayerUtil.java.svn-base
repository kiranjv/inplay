package com.app.player.util;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.EOFException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.CodeSource;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.border.LineBorder;

import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import uk.co.caprica.vlcj.runtime.windows.WindowsCanvas;

import com.InplayResourceFinder;
import com.app.player.InplayComponentFactory;
import com.app.player.InplayPlayerContext;
import com.app.player.InplayScreenResolutionHelper;
import com.app.player.common.InplayConstants;
import com.app.player.context.InlayPlayerContext;
import com.app.player.data.InplayDataCreator;
import com.app.player.data.InplayQueryGenerator;
import com.app.player.data.InplayVideoDetailsDTO;
import com.app.player.header.InplayHeaderPanel;
import com.app.player.http.InplayJavaHttpConnector;
import com.app.player.left.InplayGenerePanel;
import com.app.player.media.InplayPlayerControlsPanel;
import com.app.player.media.InplayPlayerScreenPanel;

public class InplayPlayerUtil {
	
	public static  void playVideo(InplayVideoDetailsDTO dto) throws Exception {
		InplayPlayerContext.setPlayingVideoDTO(dto);
		EmbeddedMediaPlayer mediaPlayer = InplayComponentFactory.getMediaPlayer();
		mediaPlayer.stop();
		JPanel mainPanel = InplayComponentFactory.getMainPanel();
		mainPanel.remove(InplayComponentFactory.getCenterPanel());
		mainPanel.add(InplayComponentFactory.getMediaPanel(),BorderLayout.CENTER);
//		InplayComponentFactory.getSearchPanel().setVisible(false);
		if(InplayPlayerContext.isUserLoggedIn()) {
		InplayComponentFactory.getRatingsPanel().setVisible(true);
		InplayComponentFactory.getRatingsPanel().setStarRatings();
		}
		mainPanel.updateUI();
		InplayComponentFactory.getMainFrame().setVisible(true);
		InlayPlayerContext.setView(InplayConstants.VIEW_MEDIA);
		InplayComponentFactory.getMediaPlayer().playMedia(dto.getVideoPath());
		InplayComponentFactory.getMediaPlayer().enableOverlay(true);
		InplayComponentFactory.getControlsPanel().getPositionSlider().setValue(0);
		// update to the database must happen at the last 
		updateVideoCount(dto);	
		}
	
	
	
	public static void updateVideoCount(final InplayVideoDetailsDTO dto) {
		
		if(dto ==null || dto.getId() == null || dto.getId().trim().length()==0) {
			return;
			// add the code to report this situation to the server.
		}
		
		class Worker extends Thread {
			
			public void run(){
				if(InplayPlayerContext.isUserLoggedIn()){
					String insertQuery = InplayQueryGenerator.
					generateInsertQueryForVideoWatch(dto, InplayPlayerContext.getUserID());
					String updateQuery = InplayQueryGenerator.generateUpdateQueryForVideoWatchVideoTable(dto);
					String result =null;
					try {
						result = InplayDataCreator.executeQuery(insertQuery);
						result = InplayDataCreator.executeQuery(updateQuery);				
						
					} catch (Exception e) {
						// TODO Auto-generated catch block
						throw new RuntimeException(e);
					}
					String videoWatchCount = dto.getVideoWatchCount();
					int value = new Integer(videoWatchCount).intValue()+1;
					dto.setVideoWatchCount(""+value);
					System.out.println("updated data with results = " + result);
					// add code to handle the result in case the query fails
				}
			}
		}
		
		new Worker().start();
	}
	
	
	public static void updateUserRating(final int userRating) {
			
			
			class Worker extends Thread {
				
				public void run(){
					if(InplayPlayerContext.isUserLoggedIn()){
						InplayVideoDetailsDTO playingVideoDTO = InplayPlayerContext.getPlayingVideoDTO();
						String selectQuery = InplayQueryGenerator.generateSelectQueryForUserRating(playingVideoDTO, 
								InplayPlayerContext.getUserID(), userRating);
						String result = null;
						try {
						result = InplayDataCreator.executeQuery(selectQuery);
						result = result.replaceAll("<tr>", "");
						result = result.replaceAll("<br>", "");
						System.out.println("---- result --- " + result);
						if(!result.trim().equals("0")) {
							String insertQuery = InplayQueryGenerator.
							generateUpdateQueryForUserRating(playingVideoDTO,InplayPlayerContext.getUserID(),userRating);
							result = InplayDataCreator.executeQuery(insertQuery);							
						} else {
						String insertQuery = InplayQueryGenerator.
						generateInsertQueryForUserRating(playingVideoDTO,InplayPlayerContext.getUserID(),userRating);
							result = InplayDataCreator.executeQuery(insertQuery);
							}
						result = updateVideoUserRatingsTable(playingVideoDTO);
						} catch (Exception e) {
							throw new RuntimeException(e);
						}
						System.out.println("updated data with results = " + result);
						// add code to handle the result in case the query fails
					}
				}

				private String updateVideoUserRatingsTable(InplayVideoDetailsDTO playingVideoDTO) throws Exception {
					String avgQuery = InplayQueryGenerator.generateAverageQueryForUserRating(playingVideoDTO);
					String result = InplayDataCreator.executeQuery(avgQuery);
					result = result.replaceAll("<tr>", "");
					result = result.replaceAll("<br>", "");
					result = result.trim();
					int ceil = new Double(Math.ceil(Double.parseDouble(result))).intValue();
					int floor = new Double(Math.floor(Double.parseDouble(result))).intValue();
					int rating = (ceil+floor)/2;
					String updateQuery = InplayQueryGenerator.generateUpdateQueryForUserRatingVideoTable(playingVideoDTO, rating);
					result = InplayDataCreator.executeQuery(updateQuery);
					playingVideoDTO.setUserRating(""+rating);
					return result;
				}
			}
			
			new Worker().start();
		}
	
	public static String getCurrentFormatedDate() {
		Date date = new Date();
		SimpleDateFormat formater = new SimpleDateFormat(InplayConstants.DB_DATE_FORMAT);
		return formater.format(date);
	}
	
	public static Date formatDate(String date) {
		SimpleDateFormat format = new SimpleDateFormat(InplayConstants.DB_DATE_FORMAT);
		try {
			return format.parse(date);
		} catch (ParseException e) {
			throw new RuntimeException(e);
		}
	}

	
	public static  void init() {
		JFrame mainFrame = InplayComponentFactory.getMainFrame();
        mainFrame.setSize(950, 650);
        mainFrame.setLocation(InplayScreenResolutionHelper.getXLocation(950), InplayScreenResolutionHelper.getYLocation(650));
		JPanel mainPanel = InplayComponentFactory.getMainPanel();
		mainFrame.setContentPane(mainPanel);
		mainPanel.add(InplayComponentFactory.getHeadPanel(),BorderLayout.NORTH);
		mainPanel.add(InplayComponentFactory.getGenerePanel(),BorderLayout.WEST);
		mainPanel.add(InplayComponentFactory.getCenterPanel(),BorderLayout.CENTER);
		mainFrame.setVisible(true);
		new InplayPlayerScreenPanel(null);
		}
	
	public static  void showMainIcon() {
		InplayComponentFactory.getSearchPanel().setVisible(true);
		JPanel mainPanel = InplayComponentFactory.getMainPanel();
		EmbeddedMediaPlayer mediaPlayer = InplayComponentFactory.getMediaPlayer();
		mediaPlayer.stop();
		mainPanel.remove(InplayComponentFactory.getMediaPanel());
//		mainPanel.add(ComponentFactory.getHeadPanel(),BorderLayout.NORTH);
//		mainPanel.add(ComponentFactory.getGenerePanel(),BorderLayout.WEST);
		mainPanel.add(InplayComponentFactory.getCenterPanel(),BorderLayout.CENTER);
		InplayComponentFactory.getHeadPanel().setVisible(true);
		InplayComponentFactory.getRatingsPanel().setVisible(false);
		mainPanel.updateUI();
		InplayComponentFactory.getMainFrame().setVisible(true);
		InlayPlayerContext.setView(InplayConstants.VIEW_ICONS);
		}

    public static void setLookAndFeel() {
        String lookAndFeelClassName = null;
        LookAndFeelInfo[] lookAndFeelInfos = UIManager.getInstalledLookAndFeels();
        for(LookAndFeelInfo lookAndFeel : lookAndFeelInfos) {
            if("Nimbus".equals(lookAndFeel.getName())) {
                lookAndFeelClassName = lookAndFeel.getClassName();
            }
        }
        if(lookAndFeelClassName == null) {
            lookAndFeelClassName = UIManager.getSystemLookAndFeelClassName();
        }
        try {
            UIManager.setLookAndFeel(lookAndFeelClassName);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static List<String> getVLCArgs() {
    List<String> vlcArgs = new ArrayList<String>();

    // vlcArgs.add("--ffmpeg-hw"); // <--- if your system supports it, this might be useful
//    vlcArgs.add("--no-plugins-cache");
    vlcArgs.add("--no-video-title-show");
    vlcArgs.add("--no-snapshot-preview");
    vlcArgs.add("--clock-jitter=0");
//    vlcArgs.add("--quiet");
//    vlcArgs.add("--quiet-synchro");
//    vlcArgs.add("--intf");
//    vlcArgs.add("dummy");
    return vlcArgs;
    }
    
    
	public static void toggleFullScreen() {
		
		InplayComponentFactory.getMediaPlayer().toggleFullScreen();
		InplayPlayerControlsPanel controlsPanel = InplayComponentFactory.getControlsPanel();
		JPanel mainPanel = InplayComponentFactory.getMainPanel();
		
		

		if(InplayPlayerContext.isFullScreenMode()) {
			showCursor();
			InplayComponentFactory.getHeadPanel().setVisible(true);
			InplayComponentFactory.getGenerePanel().setVisible(true);
			controlsPanel.setVisible(true);
			mainPanel.setBorder(new LineBorder(new Color(182,182,182),2));
			InplayComponentFactory.getMediaPlayerEastPanel().setVisible(true);
			InplayPlayerContext.setFullScreenMode(false);

		} else {
			hideCursor();
			InplayComponentFactory.getHeadPanel().setVisible(false);
			InplayComponentFactory.getGenerePanel().setVisible(false);
			controlsPanel.setVisible(false);
			mainPanel.setBorder(null);
			InplayComponentFactory.getMediaPlayerEastPanel().setVisible(false);
			InplayPlayerContext.setFullScreenMode(true);
		}
		

	}

	public static void showCursor() {
		InplayComponentFactory.getVideoSurface().setCursor(null);
	}
	
	public static void hideCursor() {
		BufferedImage cursorImg = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);

    	Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(
    	    cursorImg, new Point(0, 0), "blank cursor");

    	InplayComponentFactory.getVideoSurface().setCursor(blankCursor);
	}

    
    public static void cleanUp() {
        Canvas videoSurface = InplayComponentFactory.getVideoSurface();
		if(videoSurface instanceof WindowsCanvas) {
            ((WindowsCanvas)videoSurface).release();
        }

        EmbeddedMediaPlayer mediaPlayer = InplayComponentFactory.getMediaPlayer();
		if(mediaPlayer!= null) {
            mediaPlayer.release();
            InplayComponentFactory.setMediaPlayer(null);
        }

        
        if(InplayComponentFactory.getMediaPlayerFactory() != null) {
        	InplayComponentFactory.getMediaPlayerFactory().release();
        	InplayComponentFactory.setMediaPlayerFactory(null);
        }
    }
    
    public static void closePlayer() {
    	cleanUp();
    	System.exit(0);
    }
    
    private static Image loadingImage = null;

	public static Image getLoadingImage() {
		try {
			if(loadingImage==null) {
			InputStream resourceAsStream = InplayResourceFinder.getResourceAsStream(InplayConstants.LOADING_IMAGE_PATH);
			loadingImage = ImageIO.read(resourceAsStream);
			}
			return loadingImage;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}
	
	public static void downloadPoster(final InplayVideoDetailsDTO dto) {
		InplayPlayerContext.getExecutor().execute(new Runnable() {

			public void run() {
				try {
					InplayImageFinder.getLocalPath(new URL(dto.getPoster()));
				} catch (Exception e) {
					System.out.println("downloading poster = " + dto.getPoster());
					e.printStackTrace();
					throw new RuntimeException(e);
				} 
			}
			
		});
	}
	
	   public static byte[] readFully(InputStream paramInputStream, int paramInt, boolean paramBoolean)
	     throws IOException
	   {
	     byte[] arrayOfByte = new byte[0];
	     if (paramInt == -1) paramInt = 2147483647;
	     int i = 0;
	     while (i < paramInt)
	     {
	       int j;
	       if (i >= arrayOfByte.length) {
	         j = Math.min(paramInt - i, arrayOfByte.length + 1024);
	         if (arrayOfByte.length < i + j)
	           arrayOfByte = Arrays.copyOf(arrayOfByte, i + j);
	       }
	       else {
	         j = arrayOfByte.length - i;
	       }
	       int k = paramInputStream.read(arrayOfByte, i, j);
	       if (k < 0) {
	         if ((paramBoolean) && (paramInt != 2147483647)) {
	           throw new EOFException("Detect premature EOF");
	         }
	         if (arrayOfByte.length == i) break;
	         arrayOfByte = Arrays.copyOf(arrayOfByte, i); break;
	       }
	 
	       i += k;
	     }
	     return arrayOfByte;
	   }
	 }
